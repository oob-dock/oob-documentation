<routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://camel.apache.org/schema/spring"
        xsi:schemaLocation="
            http://camel.apache.org/schema/spring
            http://camel.apache.org/schema/spring/camel-spring.xsd">
    <route id="accountsGetAccountsRoute">
        <from uri="direct:accountsGetAccounts"/>
        <to uri="{{env:ROUTE_ACCOUNTS}}?bridgeEndpoint=true&amp;throwExceptionOnFailure=false&amp;httpMethod=POST"/>
        <choice>
            <when>
                <simple>${header.CamelHttpResponseCode} in '200,201,202'</simple>
                <setHeader name="CamelHttpResponseCode">
                    <constant>200</constant>
                </setHeader>
            </when>
            <otherwise>
                <to uri="direct:getMockError"/>
            </otherwise>
        </choice>
    </route>
    <route id="accountsGetAccountsAccountIdRoute">
        <from uri="direct:accountsGetAccountsAccountId"/>
        <setProperty name="AccountId">
            <jsonpath>$.accountId[0].value</jsonpath>
        </setProperty>
        <toD uri="{{env:ROUTE_ACCOUNTS}}/${exchangeProperty[AccountId]}?bridgeEndpoint=true&amp;throwExceptionOnFailure=false&amp;httpMethod=POST"/>
        <choice>
            <when>
                <simple>${header.CamelHttpResponseCode} in '200,201,202'</simple>
                <setHeader name="CamelHttpResponseCode">
                    <constant>200</constant>
                </setHeader>
            </when>
            <otherwise>
                <to uri="direct:getMockError"/>
            </otherwise>
        </choice>
    </route>
    <route id="accountsGetAccountsAccountIdBalancesRoute">
        <from uri="direct:accountsGetAccountsAccountIdBalances"/>
        <setProperty name="AccountId">
            <jsonpath>$.accountId[0].value</jsonpath>
        </setProperty>
        <toD uri="{{env:ROUTE_ACCOUNTS}}/${exchangeProperty[AccountId]}/balances?bridgeEndpoint=true&amp;throwExceptionOnFailure=false&amp;httpMethod=POST"/>
        <choice>
            <when>
                <simple>${header.CamelHttpResponseCode} in '200,201,202'</simple>
                <setHeader name="CamelHttpResponseCode">
                    <constant>200</constant>
                </setHeader>
            </when>
            <otherwise>
                <to uri="direct:getMockError"/>
            </otherwise>
        </choice>
    </route>
    <route id="accountsGetAccountsAccountIdOverdraftLimitsRoute">
        <from uri="direct:accountsGetAccountsAccountIdOverdraftLimits"/>
        <setProperty name="AccountId">
            <jsonpath>$.accountId[0].value</jsonpath>
        </setProperty>
        <toD uri="{{env:ROUTE_ACCOUNTS}}/${exchangeProperty[AccountId]}/overdraft-limits?bridgeEndpoint=true&amp;throwExceptionOnFailure=false&amp;httpMethod=POST"/>
        <choice>
            <when>
                <simple>${header.CamelHttpResponseCode} in '200,201,202'</simple>
                <setHeader name="CamelHttpResponseCode">
                    <constant>200</constant>
                </setHeader>
            </when>
            <otherwise>
                <to uri="direct:getMockError"/>
            </otherwise>
        </choice>
    </route>
    <route id="accountsGetAccountsAccountIdTransactionsRoute">
        <from uri="direct:accountsGetAccountsAccountIdTransactions"/>
        <setProperty name="AccountId">
            <jsonpath>$.accountId[0].value</jsonpath>
        </setProperty>
        <toD uri="{{env:ROUTE_ACCOUNTS}}/${exchangeProperty[AccountId]}/transactions?bridgeEndpoint=true&amp;throwExceptionOnFailure=false&amp;httpMethod=POST"/>
        <choice>
            <when>
                <simple>${header.CamelHttpResponseCode} in '200,201,202'</simple>
                <setHeader name="CamelHttpResponseCode">
                    <constant>200</constant>
                </setHeader>
            </when>
            <otherwise>
                <to uri="direct:getMockError"/>
            </otherwise>
        </choice>
    </route>
    <route id="getMockError">
        <from uri="direct:getMockError"/>
        <to uri="velocity:file://work/account/response-error-example.json?allowContextMapAll=true&amp;encoding=UTF-8"/>
        <setHeader name="CamelHttpResponseCode">
            <constant>500</constant>
        </setHeader>
    </route>
</routes>